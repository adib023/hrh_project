function [N,DN] = shapeFnBrick2(r) 

% quadratic Lagrange shape functions 
% 27 node brick/hexahedral element

[L1,DL1] = getLagrange2(r(1)) ; 
[L2,DL2] = getLagrange2(r(2)) ; 
[L3,DL3] = getLagrange2(r(3)) ; 

% ordering consistent with vtk format. see figure in 
% https://vtk.org/doc/nightly/html/classvtkTriQuadraticHexahedron.html 

N = [  	L1(1) * L2(1) * L3(1) , ... % 0
	L1(3) * L2(1) * L3(1) , ... % 1 
	L1(3) * L2(3) * L3(1) , ... % 2
	L1(1) * L2(3) * L3(1) , ... % 3
				...
	L1(1) * L2(1) * L3(3) , ... % 4
	L1(3) * L2(1) * L3(3) , ... % 5
	L1(3) * L2(3) * L3(3) , ... % 6
	L1(1) * L2(3) * L3(3) , ... % 7
				...
	L1(2) * L2(1) * L3(1) , ... % 8
	L1(3) * L2(2) * L3(1) , ... % 9
	L1(2) * L2(3) * L3(1) , ... % 10
	L1(1) * L2(2) * L3(1) , ... % 11
				...
	L1(2) * L2(1) * L3(3) , ... % 12
	L1(3) * L2(2) * L3(3) , ... % 13
	L1(2) * L2(3) * L3(3) , ... % 14
	L1(1) * L2(2) * L3(3) , ... % 15
				...
	L1(1) * L2(1) * L3(2) , ... % 16
	L1(3) * L2(1) * L3(2) , ... % 17
	L1(3) * L2(3) * L3(2) , ... % 18
	L1(1) * L2(3) * L3(2) , ... % 19
				...
	L1(1) * L2(2) * L3(2) , ... % 20
	L1(3) * L2(2) * L3(2) , ... % 21
	L1(2) * L2(1) * L3(2) , ... % 22
	L1(2) * L2(3) * L3(2) , ... % 23
				...
	L1(2) * L2(2) * L3(1) , ... % 24
	L1(2) * L2(2) * L3(3) , ... % 25
	L1(2) * L2(2) * L3(2) , ... % 26
	] ;

DN = [ 	DL1(1) * L2(1) * L3(1) , L1(1) * DL2(1) * L3(1) , L1(1) * L2(1) * DL3(1) ; ... % 0
	DL1(3) * L2(1) * L3(1) , L1(3) * DL2(1) * L3(1) , L1(3) * L2(1) * DL3(1) ; ... % 1
	DL1(3) * L2(3) * L3(1) , L1(3) * DL2(3) * L3(1) , L1(3) * L2(3) * DL3(1) ; ... % 2
	DL1(1) * L2(3) * L3(1) , L1(1) * DL2(3) * L3(1) , L1(1) * L2(3) * DL3(1) ; ... % 3
	...
	DL1(1) * L2(1) * L3(3) , L1(1) * DL2(1) * L3(3) , L1(1) * L2(1) * DL3(3) ; ... % 4
	DL1(3) * L2(1) * L3(3) , L1(3) * DL2(1) * L3(3) , L1(3) * L2(1) * DL3(3) ; ... % 5
	DL1(3) * L2(3) * L3(3) , L1(3) * DL2(3) * L3(3) , L1(3) * L2(3) * DL3(3) ; ... % 6
	DL1(1) * L2(3) * L3(3) , L1(1) * DL2(3) * L3(3) , L1(1) * L2(3) * DL3(3) ; ... % 7
	...
	DL1(2) * L2(1) * L3(1) , L1(2) * DL2(1) * L3(1) , L1(2) * L2(1) * DL3(1) ; ... % 8
	DL1(3) * L2(2) * L3(1) , L1(3) * DL2(2) * L3(1) , L1(3) * L2(2) * DL3(1) ; ... % 9
	DL1(2) * L2(3) * L3(1) , L1(2) * DL2(3) * L3(1) , L1(2) * L2(3) * DL3(1) ; ... % 10
	DL1(1) * L2(2) * L3(1) , L1(1) * DL2(2) * L3(1) , L1(1) * L2(2) * DL3(1) ; ... % 11
	...
	DL1(2) * L2(1) * L3(3) , L1(2) * DL2(1) * L3(3) , L1(2) * L2(1) * DL3(3) ; ... % 12
	DL1(3) * L2(2) * L3(3) , L1(3) * DL2(2) * L3(3) , L1(3) * L2(2) * DL3(3) ; ... % 13
	DL1(2) * L2(3) * L3(3) , L1(2) * DL2(3) * L3(3) , L1(2) * L2(3) * DL3(3) ; ... % 14
	DL1(1) * L2(2) * L3(3) , L1(1) * DL2(2) * L3(3) , L1(1) * L2(2) * DL3(3) ; ... % 15
	...
	DL1(1) * L2(1) * L3(2) , L1(1) * DL2(1) * L3(2) , L1(1) * L2(1) * DL3(2) ; ... % 16
	DL1(3) * L2(1) * L3(2) , L1(3) * DL2(1) * L3(2) , L1(3) * L2(1) * DL3(2) ; ... % 17
	DL1(3) * L2(3) * L3(2) , L1(3) * DL2(3) * L3(2) , L1(3) * L2(3) * DL3(2) ; ... % 18
	DL1(1) * L2(3) * L3(2) , L1(1) * DL2(3) * L3(2) , L1(1) * L2(3) * DL3(2) ; ... % 19
	...
	DL1(1) * L2(2) * L3(2) , L1(1) * DL2(2) * L3(2) , L1(1) * L2(2) * DL3(2) ; ... % 20
	DL1(3) * L2(2) * L3(2) , L1(3) * DL2(2) * L3(2) , L1(3) * L2(2) * DL3(2) ; ... % 21
	DL1(2) * L2(1) * L3(2) , L1(2) * DL2(1) * L3(2) , L1(2) * L2(1) * DL3(2) ; ... % 22
	DL1(2) * L2(3) * L3(2) , L1(2) * DL2(3) * L3(2) , L1(2) * L2(3) * DL3(2) ; ... % 23
	...
	DL1(2) * L2(2) * L3(1) , L1(2) * DL2(2) * L3(1) , L1(2) * L2(2) * DL3(1) ; ... % 24
	DL1(2) * L2(2) * L3(3) , L1(2) * DL2(2) * L3(3) , L1(2) * L2(2) * DL3(3) ; ... % 25
	DL1(2) * L2(2) * L3(2) , L1(2) * DL2(2) * L3(2) , L1(2) * L2(2) * DL3(2) ...   % 26
	] ;

end

function [L,DL] = getLagrange2(r)

L(1) = 	0.5 * r * (r-1) ; 
L(2) = 	1.0 - r * r ;
L(3) = 	0.5 * r * (r+1) ;

DL(1) = r - 0.5 ;
DL(2) = -2 * r  ;
DL(3) = r + 0.5 ;

end
